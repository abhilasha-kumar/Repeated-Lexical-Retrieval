\documentclass[letterpaper]{article}
\usepackage[a4paper, total={7in, 8in}]{geometry}

\usepackage{xcolor}
\usepackage{Sweavel}
\usepackage{graphicx}
\def\Sweavesize{\normalsize}
% Uncomment some of the following to use some alternatives:
\def\Rcolor{\color{black}}
\def\Routcolor{\color{blue}}
\def\Rcommentcolor{\color{blue}}
\definecolor{babyblueeyes}{rgb}{0.74, 0.83, 0.95}

% To change background color or R code and/or output, use e.g.:
\def\Rbackground{\color{babyblueeyes}}
\def\Routbackground{\color[gray]{.8}}

% To use rgb specifications use \color[rgb]{ , , }
% To use gray scale use e.g. \color[gray]{0.5}
% If you change any of these after the first chunk is produced, the
% changes will have effect only for the next chunk.

\title{Repeated Lexical Retrieval: Experiment 5}
\author{Abhilasha Kumar}

\begin{document}
\SweaveOpts{concordance=FALSE}

 \maketitle

\section{Reading the Data File}

We first read the file into an object called SemanticCuedRecall. We can also display some part of the data by calling the head() function.

<<>>=
SemanticCuedRecall = read.csv("E5_SemanticCuedRecall_FINAL.csv",
                         header = TRUE, sep = ",")
head(SemanticCuedRecall[,c(1,21,22)])
@

\subsection{LME}

<<>>=
library(lme4)
contrasts(SemanticCuedRecall$PrimeCondition)= contr.treatment(2, base = 2)

prime_lmer2 = glmer(data = SemanticCuedRecall,
                   TargetAccuracy ~ PrimeCondition +
                     (1|Subject) + (1|Stimuli1),
                          family = "binomial",
                          control=glmerControl(optimizer="bobyqa",
            optCtrl=list(maxfun=100000)))
summary(prime_lmer2)
#confint(prime_lmer2)
# > confint(prime_lmer2)
# Computing profile confidence intervals ...
#                      2.5 %      97.5 %
# .sig01           0.9316669  1.52830645
# .sig02           0.7217247  1.34753572
# (Intercept)     -1.0933527 -0.03889619
# PrimeCondition1 -0.4187832  0.09229101
@

\subsection {Percentage State Prime Analysis}

<<>>=
state = read.csv("SemanticCuedRecall_AGG.csv",header = TRUE, sep = ",")

j_statepercent = state[,c(1,21:28)] # use for prime percents
j_statepercent$Subject = as.factor(j_statepercent$Subject)

library(tidyr)
library(dplyr)
statepercent <- j_statepercent %>%
  gather(PrimeState, Percent, 
         prop_r_know, prop_r_dontknow, prop_r_other, prop_r_TOT,
         prop_u_know, prop_u_dontknow, prop_u_other, prop_u_TOT) %>%
  separate(PrimeState, c('Prop', 'Prime', 'State'), sep = "_") %>%
  arrange(Subject)
#removing prop
statepercent = statepercent[,-2]

colnames(statepercent) = c( "Subject",
                            "PrimeCondition", "State", "Percent")

statepercent$Subject <- as.factor(statepercent$Subject)
statepercent$PrimeCondition <- as.factor(statepercent$PrimeCondition)
statepercent$State <- as.factor(statepercent$State)
statepercent$Percent <- as.numeric(as.character(statepercent$Percent))

## anova

state_aov = aov(data = statepercent, Percent ~ PrimeCondition*State + 
                  Error(Subject/(PrimeCondition*State)))
summary(state_aov)
@ 
\subsubsection {plot}
<<>>=
## figure
state_rmisc = Rmisc::summarySE(statepercent,
                               measurevar = "Percent",
                               groupvars = c("PrimeCondition","State"))

x <- c("know","dontknow", "other", "TOT")

state_rmisc = state_rmisc %>%
  mutate(rstate =  factor(State, levels = x)) %>%
  arrange(rstate)

library(ggplot2)
library(ggthemes)

percentplot = state_rmisc %>% 
  mutate(PrimeType = factor(PrimeCondition, levels = unique(PrimeCondition),
                    labels = c( "Semantic", "Unrelated")),
   R = factor(rstate, levels = unique(rstate),
                                labels = c( "1: Know","2: Dont Know",
                                            "3:Other", "4: TOT")))%>%
  
ggplot(aes(x = R, y = Percent, 
           group = PrimeType, fill = PrimeType))+
 geom_bar(stat = "identity", position = "dodge", width = 0.7, 
          color= "black")+
  geom_errorbar(aes(ymin=Percent - se, ymax=Percent + se), 
             width=.2, color = "gray26", 
             position = position_dodge(0.7))+
 theme_few()+
    xlab("") + ylab("Percentage of trials") + 
 scale_fill_manual(values = c( "red","lightgreen"))+    
  ggtitle("E6")  +
   theme(axis.text = element_text(size = rel(1)),
          axis.title = element_text(face = "bold", size = rel(1)),
          legend.title = element_text(face = "bold", size = rel(1)),
         plot.title = element_text(hjust = .5),
                  axis.text.x = element_text(size = rel(1)),
         strip.text.x = element_text(face = "bold", size = rel(1.4)))
percentplot
@

\subsubsection {know}

<<>>=
e1_know = statepercent %>% filter(State == "know")
e1_know_aov = aov(data = e1_know, 
                          Percent ~ PrimeCondition + 
                        Error(Subject/PrimeCondition))
summary(e1_know_aov)
@
\subsubsection {dont know}

<<>>=
e1_dontknow = statepercent %>% filter(State == "dontknow")
e1_dontknow_aov = aov(data = e1_dontknow, 
                          Percent ~ PrimeCondition + 
                        Error(Subject/PrimeCondition))
summary(e1_dontknow_aov)
@

\subsubsection {other}
<<>>=

e1_other = statepercent %>% filter(State == "other")
e1_other_aov = aov(data = e1_other, 
                          Percent ~ PrimeCondition + 
                        Error(Subject/PrimeCondition))
summary(e1_other_aov)
@

\subsubsection{ TOT}
<<>>=

e1_TOT = statepercent %>% filter(State == "TOT")
e1_TOT_aov = aov(data = e1_TOT, 
                          Percent ~ PrimeCondition + 
                        Error(Subject/PrimeCondition))
summary(e1_TOT_aov)
@

\section {Raw Retrieval States}

<<>>=
library(dplyr)
SemanticCuedRecall_Count = group_by(SemanticCuedRecall,
                                    Subject, PrimeCondition,
                                    TargetQuestion.RESP.Trial.) %>%
  summarise(Count = n())

state_rmisc = Rmisc::summarySE(SemanticCuedRecall_Count,
                               measurevar = "Count",
                               groupvars = c("PrimeCondition",
                                             "TargetQuestion.RESP.Trial."))

x <- c("1","2", "3", "4")

state_rmisc = state_rmisc %>%
  mutate(rstate =  factor(TargetQuestion.RESP.Trial., levels = x)) %>%
  arrange(rstate)

library(ggplot2)
library(ggthemes)

percentplot = state_rmisc %>% 
  mutate(PrimeType = factor(PrimeCondition, levels = unique(PrimeCondition),
                    labels = c("Semantic", "Unrelated")),
   R = factor(rstate, levels = unique(rstate),
                                labels = c( "1: Know","2: Dont Know",
                                            "3:Other", "4: TOT")))%>%
ggplot(aes(x = R, y = Count, 
           group = PrimeType, fill = PrimeType))+
 geom_bar(stat = "identity", position = "dodge", width = 0.7, 
          color= "black")+
  geom_errorbar(aes(ymin=Count - se, ymax=Count + se), 
             width=.2, color = "gray26", 
             position = position_dodge(0.7))+
 theme_few()+
    xlab("") + ylab("Number of trials") + 
 scale_fill_manual(values = c( "red",
                               "lightgreen"))+    
  ggtitle("E6")  +
   theme(axis.text = element_text(size = rel(1)),
          axis.title = element_text(face = "bold", size = rel(1)),
          legend.title = element_text(face = "bold", size = rel(1)),
         plot.title = element_text(hjust = .5),
                  axis.text.x = element_text(size = rel(1)),
         strip.text.x = element_text(face = "bold", size = rel(1.4)))
percentplot
@

\section {Conditional Target Accuracy}

In this section, we calculate the number of trials in which participants correctly or incorrectly recalled the item, and split that by whether they correctly recalled the target from the definition. Then, we calculate the proportion of trials from the raw number of trials.

<<>>=
library(dplyr)

cued_acc = group_by(SemanticCuedRecall) %>%
  summarise_at(vars(CuedRecallAcc, TargetAccuracy), mean)

cued_acc = group_by(SemanticCuedRecall, Subject, 
                    PrimeCondition, CuedRecallAcc) %>%
  summarise(recalltrials = n())

conditional_acc = group_by(SemanticCuedRecall, Subject, PrimeCondition,
                           CuedRecallAcc, TargetAccuracy) %>%
  summarise(trials = n())

merge_acc = merge(conditional_acc, cued_acc, 
                  by = c("Subject", "PrimeCondition", "CuedRecallAcc"))
merge_acc$prop = merge_acc$trials/merge_acc$recalltrials
@

\section {ANOVA}

In this section, we perform a repeated measures ANOVA on our data, to see if we are indeed seeing a difference in the proportion of unsuccessful trials for failed and successful cued recall. 

<<>>=

merge_acc$Subject = 
  as.factor(as.character(merge_acc$Subject))
merge_acc$CuedRecallAcc = 
  as.factor(as.character(merge_acc$CuedRecallAcc))
merge_acc$TargetAccuracy = 
  as.factor(as.character(merge_acc$TargetAccuracy))

merge_acc = merge_acc[order(merge_acc$Subject, merge_acc$CuedRecallAcc),]

library(lme4)
cond_aov = lmer(data = merge_acc, 
        prop ~ PrimeCondition*CuedRecallAcc*TargetAccuracy +
          (1|Subject))
summary(cond_aov)
car::Anova(cond_aov)

@

The ANOVA output tells us that the interaction term is not signiificant. We will next see this in a figure, to better understand our data.

\section {Conditional Figure}

<<fig=TRUE>>=
cond_figure = Rmisc::summarySE(merge_acc, 
                        measurevar = "prop",
                        groupvars = c("PrimeCondition", "CuedRecallAcc", 
                                      "TargetAccuracy"))

library(ggplot2)
library(ggthemes)
condfigure_plot = cond_figure %>% mutate(Recall = factor(CuedRecallAcc, 
                      levels = unique(CuedRecallAcc),
                    labels = c("Failed Recall", 
                               "Successful Recall")),
                    `Target Retrieval` = factor(TargetAccuracy,
                          levels = unique(TargetAccuracy),
                       labels = c("Failed Target Retrieval", 
                            "Successful Target Retrieval")))%>%
ggplot(aes(x = Recall, y = prop, 
           fill = `Target Retrieval`, group = `Target Retrieval`))+
 geom_bar(stat = "identity", position = "dodge", width = 0.7)+
  geom_errorbar(aes(ymin=prop - ci, ymax=prop + ci), 
             width=.2, color = "gray26", 
             position = position_dodge(0.7))+
  facet_wrap(~PrimeCondition)+
 theme_few()+
  scale_fill_wsj()+
    xlab("Cued Recall Accuracy") + ylab("Mean Proportion of Trials") + 
  ggtitle("Target Retrieval Accuracy 
          as a function of Cued Recall Accuracy")  +
   theme(axis.text = element_text(face = "bold", size = rel(1)),
          axis.title = element_text(face = "bold", size = rel(1)),
          legend.title = element_text(face = "bold", size = rel(1)),
          plot.title = element_text(face = "bold", 
                  size = rel(1.2), hjust = .5),
         strip.text.x = element_text(face = "bold", size = rel(1.4)))
condfigure_plot
@

\section*{Figure Overall Target Accuracy }

<<fig=TRUE>>=

prime_targetacc = group_by(SemanticCuedRecall, Subject, PrimeCondition) %>%
  summarise_at(vars(TargetAccuracy), mean)

target_rmisc_overall = Rmisc::summarySE(prime_targetacc, 
                      measurevar = "TargetAccuracy",
                      groupvars = c("PrimeCondition"))

library(ggplot2)
library(ggthemes)
target_rmisc_overall %>% 
ggplot(aes(x = PrimeCondition , y = TargetAccuracy))+
 geom_bar(stat = "identity", position = "dodge", width = 0.5)+
  geom_errorbar(aes(ymin = TargetAccuracy - se, ymax = TargetAccuracy + se),
                width=.05, position=position_dodge(.5)) +
  theme_few()+
  scale_fill_manual(values= c("slategray4", "slategray1"))+
  xlab("Item Condition") + ylab("Mean Target Accuracy") + 
  ggtitle("Target Retrieval Accuracy ") +
    theme(axis.text = element_text(face = "bold", size = rel(1)),
          axis.title = element_text(face = "bold", size = rel(1.2)),
          legend.title = element_text(face = "bold", size = rel(1.2)),
          plot.title = element_text(face = "bold", size = rel(1.4), hjust = .5))
@

\subsection *{ANOVA}

<<>>=
prime_targetacc$Subject = as.factor(prime_targetacc$Subject)
targetacc_aov = aov(data = prime_targetacc, 
                    TargetAccuracy ~ PrimeCondition + 
                      Error(Subject/PrimeCondition))
summary(targetacc_aov)

## ITEM

prime_targetacc_item = group_by(SemanticCuedRecall, Stimuli1, PrimeCondition) %>%
  summarise_at(vars(TargetAccuracy), mean)

prime_targetacc_item$Stimuli1 = as.factor(prime_targetacc_item$Stimuli1)
targetacc_aov_item = aov(data = prime_targetacc_item, 
                    TargetAccuracy ~ PrimeCondition + 
                      Error(Stimuli1/PrimeCondition))
summary(targetacc_aov_item)

@

\section*{Figure Target Accuracy }

<<fig=TRUE>>=
target_retrievalacc = group_by(SemanticCuedRecall, Subject, PrimeCondition,
                               CuedRecallAcc) %>%
  summarise_at(vars(TargetAccuracy), mean)
target_rmisc = Rmisc::summarySE(target_retrievalacc, 
                      measurevar = "TargetAccuracy",
                      groupvars = c("PrimeCondition", "CuedRecallAcc"))

library(ggplot2)
library(ggthemes)
target_rmisc %>% mutate(`Item Retrieval` = factor(CuedRecallAcc, 
                                        levels = unique(CuedRecallAcc),
                    labels = c("Not Retrieved", "Retrieved")))%>%
ggplot(aes(x = PrimeCondition , y = TargetAccuracy,
      group = `Item Retrieval`, fill = `Item Retrieval`))+
 geom_bar(stat = "identity", position = "dodge", width = 0.5)+
  geom_errorbar(aes(ymin = TargetAccuracy - se, ymax = TargetAccuracy + se),
                width=.05, position=position_dodge(.5)) +
  theme_few()+
  scale_fill_manual(values= c("slategray4", "slategray1"))+
  xlab("Item Condition") + ylab("Mean Target Accuracy") + 
  ggtitle("Target Retrieval Accuracy ") +
    theme(axis.text = element_text(face = "bold", size = rel(1)),
          axis.title = element_text(face = "bold", size = rel(1.2)),
          legend.title = element_text(face = "bold", size = rel(1.2)),
          plot.title = element_text(face = "bold", size = rel(1.4), hjust = .5))
@

\subsection {Masters Retrieval Figure}

<<>>=
SemanticCuedRecall_fig = SemanticCuedRecall
SemanticCuedRecall_fig$primefac = ordered(as.factor(as.character(SemanticCuedRecall_fig$PrimeCondition)), 
                      levels = c("Semantic", "Unrelated"))

SemanticCuedRecall_fig$TargetAccuracy = as.numeric(as.character(SemanticCuedRecall_fig$TargetAccuracy))

SemanticCuedRecall_fig$CuedRecallAcc_Fac = ordered(as.factor(as.character(SemanticCuedRecall_fig$CuedRecallAcc)), levels = c("1", "0"))


targetacc2  = group_by(SemanticCuedRecall_fig, Subject, primefac,
                       CuedRecallAcc_Fac) %>%
  summarise_at(vars(TargetAccuracy), mean)

ret_figure = Rmisc::summarySE(targetacc2, 
                    measurevar = "TargetAccuracy",
                groupvars = c("primefac", "CuedRecallAcc_Fac"))

library(ggplot2)
library(ggthemes)
ret_figure  %>% mutate(PrimeType = factor(primefac, 
                                        levels = unique(primefac),
                    labels = c("Semantic", 
                                "Unrelated")),
                    `Prime Retrieval` = factor(CuedRecallAcc_Fac, 
                                levels = unique(CuedRecallAcc_Fac),
                    labels = c("Retrieved", "Not Retrieved")))%>%
   ggplot(aes(x = `Prime Retrieval`, y = TargetAccuracy, 
                          group =PrimeType , 
                          fill = PrimeType)) +
  geom_bar(stat = "identity", position = "dodge", width = 0.5,
           color ="gray28")+
   geom_errorbar(aes(ymin = TargetAccuracy - se, 
                     ymax = TargetAccuracy + se),
                width=.08, position=position_dodge(.5)) +
  theme_few()+
#  scale_fill_canva()+
 scale_fill_manual(values = c(  "red",
                               "lightgreen"))+       
  xlab("Prime Retrieval") + ylab("Mean Target Accuracy") + 
ggtitle(" Experiment 5") +
  theme(axis.text = element_text(size = rel(1)),
          axis.title = element_text(face = "bold", size = rel(1)),
          legend.title = element_text(face = "bold", size = rel(1)),
         plot.title = element_text(hjust = .5, size = rel(1)),
         axis.text.x = element_text(face = "bold", size = rel(1.2)))

@
\subsection {ANOVA}

<<>>=
target_retrievalacc[120,] = c(3, "Unrelated", 1, 0 )
target_retrievalacc$Subject = as.factor(target_retrievalacc$Subject)
target_retrievalacc$TargetAccuracy = as.numeric(target_retrievalacc$TargetAccuracy)
target_retrievalacc$CuedRecallAcc = as.factor(target_retrievalacc$CuedRecallAcc)


targetacc_aov = aov(data = target_retrievalacc, 
                    TargetAccuracy ~ PrimeCondition*CuedRecallAcc + 
                      Error(Subject/(PrimeCondition*CuedRecallAcc)))
summary(targetacc_aov)
@




\section {HLM Model}

<<>>=
library(lme4)


# participant_acc = group_by(SemanticCuedRecall, Subject) %>%
#   summarise_at(vars(TargetAccuracy, CuedRecallAcc), mean)
# 
# participant_acc$MeanAcc = (participant_acc$TargetAccuracy + 
#                           participant_acc$CuedRecallAcc)/2
# 
# colnames(participant_acc) = c("Subject", "TargetAcc", "PrimeAcc", "MeanAcc")
# 
# SemanticCuedRecall2 = merge(SemanticCuedRecall, participant_acc[,c(1,3,4)], 
#                        by = c("Subject"))

## accounting for mean prime accuracy 

item_acc = group_by(SemanticCuedRecall, Stimuli1, PrimeCondition) %>%
  summarise_at(vars(CuedRecallAcc), mean)

colnames(item_acc) = c("Stimuli1","PrimeCondition","PrimeAcc")

SemanticCuedRecall2 = merge(SemanticCuedRecall, item_acc, 
                       by = c("Stimuli1", "PrimeCondition"))

SemanticCuedRecall2$TargetAccuracy = as.factor(SemanticCuedRecall$TargetAccuracy)
SemanticCuedRecall2$CuedRecallAcc = as.factor(SemanticCuedRecall$CuedRecallAcc)

SemanticCuedRecall2$FailedRetrieval = ifelse(SemanticCuedRecall2$TargetAccuracy == 1,0,1)

SemanticCuedRecall$FailedRetrieval = ifelse(SemanticCuedRecall$TargetAccuracy == 1,0,1)

contrasts(SemanticCuedRecall2$PrimeCondition)
SemanticCuedRecall_hlm = glmer(data = SemanticCuedRecall2, 
                               TargetAccuracy ~ PrimeCondition*CuedRecallAcc +
                                 PrimeAcc+
                        (1|Subject) + (1|Stimuli1), family = "binomial",
                          control=glmerControl(optimizer="bobyqa",
          optCtrl=list(maxfun=100000)))

summary(SemanticCuedRecall_hlm)
# confint(SemanticCuedRecall_hlm)
# 
# > confint(SemanticCuedRecall_hlm)
# Computing profile confidence intervals ...
#                                     2.5 %        97.5 %
# .sig01                          0.4780585  0.8696471513
# .sig02                          0.0000000  0.2099374355
# (Intercept)                    -0.9371125  0.0004921197
# PrimeCondition1                -0.2101249  0.2402437248
# CuedRecallAcc1                 -0.4476967 -0.1124926698
# PrimeAcc                       -0.9312133  0.8241912472
# PrimeCondition1:CuedRecallAcc1 -0.1952867  0.2593870052

# car::Anova(SemanticCuedRecall_hlm)
# options(contrasts = c("contr.sum","contr.poly"))
# anova(SemanticCuedRecall_hlm)
@

\section {z-scoring RTs}
\subsection*{RT prime and Target}

<<>>=
library(dplyr)
colnames(SemanticCuedRecall) = c("Subject", "Session",	"Procedure",
"Trial",	"ActualPrime",	"PrimeCondition",	"PrimeDef",	"PrimeDefRT",
"PrimeDefinition",	"PrimeLength",	"PrimeResponse"	, 
"PrimeResponseRT", "Stimuli1", "Target",	"TargetDefinition", 
"TargetDefRT", "State",	"StateRT", "TargetResponse", "TargetResponseRT",	"CuedRecallAcc", "TargetAccuracy",	"PrimeIntrusion",	"ItemResponse", 
"TargetResponse", "RTrecognisePrime",	"RTrecogniseTarget",
"PrimeRespType", "TargetRespType",
                           "FailedRetrieval")

SemanticCuedRecall_firsttrim_target = subset(SemanticCuedRecall, 
                                 SemanticCuedRecall$RTrecogniseTarget > 250 &
                                SemanticCuedRecall$RTrecogniseTarget < 7000)

SemanticCuedRecall_firsttrim_prime = subset(SemanticCuedRecall, 
                                 SemanticCuedRecall$RTrecognisePrime > 250 &
                                SemanticCuedRecall$RTrecognisePrime < 7000)

SemanticCuedRecall_firsttrim_targetdef = subset(SemanticCuedRecall, 
                                 SemanticCuedRecall$TargetDefRT > 250 &
                                SemanticCuedRecall$TargetDefRT < 9000)

@ 

\subsection*{RTRecogniseprime}

<<>>=
## FOR PRIME
## aggregate per subject all IVs and DVs
meanRT = group_by(SemanticCuedRecall_firsttrim_prime, Subject) %>%
  summarise_at(vars(RTrecognisePrime), mean)
colnames(meanRT) = c("Subject", 
                     "MeanRTrecogPrime")

sdRT = group_by(SemanticCuedRecall_firsttrim_prime, Subject) %>%
  summarise_at(vars(RTrecognisePrime), sd)
colnames(sdRT) = c("Subject",
                     "sdRTrecogPrime")

RT_agg = merge(meanRT, sdRT, by = "Subject")

## merge aggregate info with long data
SemanticCuedRecall_z_prime = merge(SemanticCuedRecall_firsttrim_prime, 
                             RT_agg, by = "Subject", all.x = T)

## person and grand-mean centered scores using original and aggregate
library(dplyr)
SemanticCuedRecall_z_prime = SemanticCuedRecall_z_prime %>% mutate(zPrimeRecogRT = 
                                             (RTrecognisePrime - 
                                                MeanRTrecogPrime)/sdRTrecogPrime)
                 
## checking: subject level means should be zero

sub_pic = group_by(SemanticCuedRecall_z_prime, Subject) %>%
  summarise_at(vars(zPrimeRecogRT), mean)
@

\subsection*{RTRecogniseTarget}
<<>>=
## FOR TARGET
## aggregate per subject all IVs and DVs
meanRT = group_by(SemanticCuedRecall_firsttrim_target, Subject) %>%
  summarise_at(vars(RTrecogniseTarget), mean)
colnames(meanRT) = c("Subject", "MeanRTrecogTarget")

sdRT = group_by(SemanticCuedRecall_firsttrim_target, Subject) %>%
  summarise_at(vars(RTrecogniseTarget), sd)
colnames(sdRT) = c("Subject", "sdRTrecogTarget")

RT_agg = merge(meanRT, sdRT, by = "Subject")

## merge aggregate info with long data
SemanticCuedRecall_z_target= merge(SemanticCuedRecall_firsttrim_target,
                             RT_agg, by = "Subject", all.x = T)

## person and grand-mean centered scores using original and aggregate
library(dplyr)
SemanticCuedRecall_z_target = SemanticCuedRecall_z_target %>% mutate( zTargetRecogRT = 
                                             (RTrecogniseTarget - 
                                                MeanRTrecogTarget)/sdRTrecogTarget)
                 
## checking: subject level means should be zero

sub_pic = group_by(SemanticCuedRecall_z_target, Subject) %>%
  summarise_at(vars(zTargetRecogRT), mean)

@

\subsection*{TargetDefRT}
<<>>=
## FOR TARGET
## aggregate per subject all IVs and DVs
meanRT = group_by(SemanticCuedRecall_firsttrim_targetdef, Subject) %>%
  summarise_at(vars(TargetDefRT), mean)
colnames(meanRT) = c("Subject", "MeanTargetRT")

sdRT = group_by(SemanticCuedRecall_firsttrim_targetdef, Subject) %>%
  summarise_at(vars(TargetDefRT), sd)
colnames(sdRT) = c("Subject", "sdTargetRT")

RT_agg = merge(meanRT, sdRT, by = "Subject")

## merge aggregate info with long data
SemanticCuedRecall_z_targetdef = merge(SemanticCuedRecall_firsttrim_targetdef,
                             RT_agg, by = "Subject", all.x = T)

## person and grand-mean centered scores using original and aggregate
library(dplyr)
SemanticCuedRecall_z_targetdef = SemanticCuedRecall_z_targetdef %>% mutate( zTargetRT = 
                                             (TargetDefRT - 
                                                MeanTargetRT)/sdTargetRT)
                 
## checking: subject level means should be zero

sub_pic = group_by(SemanticCuedRecall_z_targetdef, Subject) %>%
  summarise_at(vars(zTargetRT), mean)

@

\section {Trimming z-RTs}

<<>>=

SemanticCuedRecall_z_trimmed_prime = subset(SemanticCuedRecall_z_prime, 
                         SemanticCuedRecall_z_prime$zPrimeRecogRT < 3 & 
                            SemanticCuedRecall_z_prime$zPrimeRecogRT > -3)

SemanticCuedRecall_z_trimmed_target = subset(SemanticCuedRecall_z_target, 
                        SemanticCuedRecall_z_target$zTargetRecogRT < 3 & 
                            SemanticCuedRecall_z_target$zTargetRecogRT > -3)

SemanticCuedRecall_z_trimmed_targetdef = subset(SemanticCuedRecall_z_targetdef,                             SemanticCuedRecall_z_targetdef$zTargetRT < 3 &                                SemanticCuedRecall_z_targetdef$zTargetRT > -3)
@

\section {Repeating z-scoring}

\subsection{For prime}

<<>>=
## aggregate per subject all IVs and DVs
meanRT_prime = group_by(SemanticCuedRecall_z_trimmed_prime, Subject) %>%
  summarise_at(vars(RTrecognisePrime), mean)
colnames(meanRT_prime) = c("Subject", 
                     "MeanRTrecogPrime_trim")

sdRT_prime = group_by(SemanticCuedRecall_z_trimmed_prime, Subject) %>%
  summarise_at(vars(RTrecognisePrime), sd)
colnames(sdRT_prime) = c("Subject",
                     "sdRTrecogPrime_trim")

RT_agg_prime = merge(meanRT_prime, sdRT_prime, by = "Subject")

## merge aggregate info with long data
SemanticCuedRecall_final_z_prime = merge(SemanticCuedRecall_z_trimmed_prime, 
                             RT_agg_prime, by = "Subject", all.x = T)

## person and grand-mean centered scores using original and aggregate
library(dplyr)
SemanticCuedRecall_final_z_prime = SemanticCuedRecall_final_z_prime %>% 
                                  mutate( zPrimeRecogRT_trim = 
                                             (RTrecognisePrime - 
                                      MeanRTrecogPrime_trim)/sdRTrecogPrime_trim)
                 
## checking: subject level means should be zero

sub_pic = group_by(SemanticCuedRecall_final_z_prime, Subject) %>%
  summarise_at(vars(zPrimeRecogRT_trim), mean)

@

\subsection{For Target}

<<>>=
## aggregate per subject all IVs and DVs
meanRT_target = group_by(SemanticCuedRecall_z_trimmed_target, Subject) %>%
  summarise_at(vars(RTrecogniseTarget), mean)
colnames(meanRT_target) = c("Subject", 
                     "MeanRTrecogTarget_trim")

sdRT_target = group_by(SemanticCuedRecall_z_trimmed_target, Subject) %>%
  summarise_at(vars(RTrecogniseTarget), sd)
colnames(sdRT_target) = c("Subject", 
                      "sdRTrecogTarget_trim")

RT_agg_target = merge(meanRT_target, sdRT_target, by = "Subject")

## merge aggregate info with long data
SemanticCuedRecall_final_z_target = merge(SemanticCuedRecall_z_trimmed_target, 
                             RT_agg_target, by = "Subject", all.x = T)

## person and grand-mean centered scores using original and aggregate
library(dplyr)
SemanticCuedRecall_final_z_target = SemanticCuedRecall_final_z_target %>% 
                                  mutate( zTargetRecogRT_trim = 
                                             (RTrecogniseTarget - 
                                      MeanRTrecogTarget_trim)/sdRTrecogTarget_trim)
                 
## checking: subject level means should be zero

sub_pic = group_by(SemanticCuedRecall_final_z_target, Subject) %>%
  summarise_at(vars(zTargetRecogRT_trim), mean)

@

\subsection{For TargetDefRT}

<<>>=
## aggregate per subject all IVs and DVs
meanRT_targetdef = group_by(SemanticCuedRecall_z_trimmed_targetdef, Subject) %>%
  summarise_at(vars(TargetDefRT), mean)
colnames(meanRT_targetdef) = c("Subject", "MeanTargetRT_trim")

sdRT_targetdef = group_by(SemanticCuedRecall_z_trimmed_targetdef, Subject) %>%
  summarise_at(vars(TargetDefRT), sd)
colnames(sdRT_targetdef) = c("Subject", "sdTargetRT_trim")

RT_agg_targetdef = merge(meanRT_targetdef, sdRT_targetdef, by = "Subject")

## merge aggregate info with long data
SemanticCuedRecall_final_z_targetdef = merge(SemanticCuedRecall_z_trimmed_targetdef, 
                             RT_agg_targetdef, by = "Subject", all.x = T)

## person and grand-mean centered scores using original and aggregate
library(dplyr)
SemanticCuedRecall_final_z_targetdef = SemanticCuedRecall_final_z_targetdef %>% 
                                  mutate(zTargetRT_trim = 
                                             (TargetDefRT - 
                                                MeanTargetRT_trim)/sdTargetRT_trim)
                 
## checking: subject level means should be zero

sub_pic = group_by(SemanticCuedRecall_final_z_targetdef, Subject) %>%
  summarise_at(vars(zTargetRT_trim), mean)

@

\subsection {Combining z-RT Prime and Target }

<<>>=
## now we have separately z-scored RTprime and RTtarget. Need to combine.
## taking only necessary columns
SemanticCuedRecall_final_z_prime2 = 
  SemanticCuedRecall_final_z_prime[,c(1,4,36)]

SemanticCuedRecall_final_z = merge(SemanticCuedRecall_final_z_target, 
                             SemanticCuedRecall_final_z_prime2, 
                             by  = c("Subject", "Trial"))

primefinal_z_targetdef = merge(SemanticCuedRecall_final_z_targetdef, 
                             SemanticCuedRecall_final_z_prime2, 
                             by  = c("Subject", "Trial"))
@

\section {Linear Models}

<<>>=
# Mean RT to retrieve Target as a function of Prime Condition

# Effect of RT prime on Accuracy
SemanticCuedRecall_final_z = SemanticCuedRecall_final_z

library(lme4)
RTprime_acc_model = glmer(data = SemanticCuedRecall_final_z, 
                    TargetAccuracy ~ PrimeCondition*zPrimeRecogRT_trim + 
                            (1|Subject) + (1|Target), family = binomial )
summary(RTprime_acc_model)

# > confint(RTprime_acc_model)
# Computing profile confidence intervals ...
#                                         2.5 %       97.5 %
# .sig01                              0.9233411  1.523687468
# .sig02                              0.7497913  1.420254602
# (Intercept)                        -1.0853659 -0.005711025
# PrimeCondition1                    -0.4617874  0.059831448
# zPrimeRecogRT_trim                 -0.5128525 -0.111067986
# PrimeCondition1:zPrimeRecogRT_trim -0.1337061  0.441776343

car::Anova(RTprime_acc_model)
options(contrasts = c("contr.sum","contr.poly"))
anova(RTprime_acc_model)

options(contrasts = c("contr.sum","contr.poly"))
anova(RTprime_acc_model)

RTprime_RT_model = lmer(data = SemanticCuedRecall_final_z, 
                    zTargetRecogRT_trim ~ zPrimeRecogRT_trim*PrimeCondition + 
                            (1|Subject) + (1|Target))
summary(RTprime_RT_model)

# > confint(RTprime_RT_model)
# Computing profile confidence intervals ...
#                                         2.5 %       97.5 %
# .sig01                              0.3279392  0.525207923
# .sig02                              0.0000000  0.049713712
# .sigma                              0.8625896  0.930180099
# (Intercept)                        -0.1178693  0.155048382
# zPrimeRecogRT_trim                  0.0732072  0.210982298
# PrimeCondition1                    -0.1190239  0.070483170
# zPrimeRecogRT_trim:PrimeCondition1 -0.2007485 -0.001098669


car::Anova(RTprime_RT_model)
options(contrasts = c("contr.sum","contr.poly"))
anova(RTprime_RT_model)

## TARGET DEF MODEL

RTprime_RTtargetdef_model = lmer(data = primefinal_z_targetdef, 
                    zTargetRT_trim ~ PrimeCondition*zPrimeRecogRT_trim + 
                            (1|Subject) + (1|Target))
summary(RTprime_RTtargetdef_model)
car::Anova(RTprime_RTtargetdef_model)

@

\section {Plotting Model Fits}
\subsubsection {Model 1}

<<>>=
## sd for zPrimeRecogRT_trim
sd(SemanticCuedRecall_final_z$zPrimeRecogRT_trim)
# this is the model

# RTprime_acc_model = glmer(data = SemanticCuedRecall_final_z, 
#                     TargetAccuracy ~ PrimeCondition*zPrimeRecogRT_trim + 
#                             (1|Subject) + (1|Target), family = binomial )
# summary(RTprime_acc_model)

primert_model = lmer(data = SemanticCuedRecall_final_z,
                     zPrimeRecogRT_trim ~ 1 + (1 | Subject) +
                       (1|Target))
summary(primert_model)

VarCorr(primert_model)
SD_prime <- as.data.frame(VarCorr(primert_model))[3, 5]

## now we need to find increments for each prime condition

primert_model_2 <- lmer(data = SemanticCuedRecall_final_z, 
                        zPrimeRecogRT_trim ~ 1 + PrimeCondition +
                      (1|Subject) + (1|Target))

prime_Inc_1_U <- 0*fixef(primert_model_2)[1]
prime_Inc_1_R <- 1*fixef(primert_model_2)[2]


predict_data_U <- with(SemanticCuedRecall_final_z,
                  data.frame(school=1,
 zPrimeRecogRT_trim=seq(from=-prime_Inc_1_U-SD_prime,
         to=-prime_Inc_1_U+SD_prime,
         by=SD_prime), 
 PrimeCondition = 0))

predict_data_R <- with(SemanticCuedRecall_final_z,
                  data.frame(school=1,
 zPrimeRecogRT_trim=seq(from=-prime_Inc_1_R-SD_prime,
         to=-prime_Inc_1_R+SD_prime,
         by=SD_prime), 
 PrimeCondition = 1))

predict_data = rbind(predict_data_U, 
                     predict_data_R)

predict_data$PrimeCondition = ifelse(predict_data$PrimeCondition == 0, 
                                     "Unrelated","Semantic")

predict_data = predict_data %>%
  mutate(predicted_values = predict(RTprime_acc_model, 
          newdata = predict_data, re.form = NA))

predict_data$prob = exp(predict_data$predicted_values)/(1+exp(predict_data$predicted_values))

predict_data %>%
  mutate(PrimeType = factor(PrimeCondition, levels = unique(PrimeCondition),
                    labels = c("Unrelated", "Semantic")))%>%
  ggplot(aes(x = zPrimeRecogRT_trim, y = prob,
             color = PrimeType)) +
    geom_line(size = 1) + 
    xlab("z-RT to Demask Prime") + ylab ("Mean Target Accuracy")+ 
  ggtitle("Experiment 5")+
theme_few() +
  scale_color_manual(values = c("lightgreen","red"))+  
    theme(axis.text = element_text(face = "bold", size = rel(1.2)),
          axis.title = element_text(face = "bold", size = rel(1.2)),
          legend.title = element_text(face = "bold", size = rel(1.2)),
    plot.title = element_text(face = "bold", size = rel(1.2), hjust = .5))
@

\subsection {Model 2}

<<>>=
# RTprime_RT_model = lmer(data = SemanticCuedRecall_final_z, 
#                     zTargetRecogRT_trim ~ zPrimeRecogRT_trim*PrimeCondition + 
#                             (1|Subject) + (1|Target))
# summary(RTprime_RT_model)

primert_model = lmer(data = SemanticCuedRecall_final_z,
                     zPrimeRecogRT_trim ~ 1 + (1 | Subject) +
                       (1|Target))
summary(primert_model)

VarCorr(primert_model)
SD_prime <- as.data.frame(VarCorr(primert_model))[3, 5]

## now we need to find increments for each prime condition

primert_model_2 <- lmer(data = SemanticCuedRecall_final_z, 
                        zPrimeRecogRT_trim ~ 1 + PrimeCondition +
                      (1|Subject) + (1|Target))

prime_Inc_1_U <- 0*fixef(primert_model_2)[1]
prime_Inc_1_R <- 1*fixef(primert_model_2)[2]


predict_data_U <- with(SemanticCuedRecall_final_z,
                  data.frame(school=1,
 zPrimeRecogRT_trim=seq(from=-prime_Inc_1_U-SD_prime,
         to=-prime_Inc_1_U+SD_prime,
         by=SD_prime), 
 PrimeCondition = 0))

predict_data_R <- with(SemanticCuedRecall_final_z,
                  data.frame(school=1,
 zPrimeRecogRT_trim=seq(from=-prime_Inc_1_R-SD_prime,
         to=-prime_Inc_1_R+SD_prime,
         by=SD_prime), 
 PrimeCondition = 1))

predict_data = rbind(predict_data_U, 
                     predict_data_R)

predict_data$PrimeCondition = ifelse(predict_data$PrimeCondition == 0, 
                                     "Unrelated","Semantic")

predict_data = predict_data %>%
  mutate(predicted_values = predict(RTprime_RT_model, 
          newdata = predict_data, re.form = NA))

predict_data %>%
  mutate(PrimeType = factor(PrimeCondition, levels = unique(PrimeCondition),
                    labels = c("Unrelated", "Semantic")))%>%
  ggplot(aes(x = zPrimeRecogRT_trim, y = predicted_values,
             color = PrimeType)) +
    geom_line(size = 1) + 
    xlab("z-RT to Demask Prime") + ylab ("z-RT to Demask Target")+ 
  ggtitle("Experiment 5")+
theme_few() +
  scale_color_manual(values = c("lightgreen","red"))+ 
    theme(axis.text = element_text(face = "bold", size = rel(1.2)),
          axis.title = element_text(face = "bold", size = rel(1.2)),
          legend.title = element_text(face = "bold", size = rel(1.2)),
    plot.title = element_text(face = "bold", size = rel(1.2), hjust = .5))

@

\subsection {RAW ACC Model}

<<fig=TRUE>>=

SemanticCuedRecall_final_z$primefac = ordered(as.factor(as.character(SemanticCuedRecall_final_z$PrimeCondition)), levels = c("Semantic", "Unrelated"))

SemanticCuedRecall_final_z %>%
  mutate(PrimeType = factor(primefac, levels = unique(primefac),
                    labels = c("Semantic", 
                                "Unrelated")))%>%
  ggplot(aes(x = zPrimeRecogRT_trim, y = TargetAccuracy, 
             group = PrimeType, color = PrimeType)) +
  geom_smooth(method = "lm", se = FALSE)+
    xlab("z-RT to Demask Prime") + ylab ("Mean Target Accuracy")+ 
  ggtitle("Experiment 6")+
theme_few() +
scale_color_manual(values = c( "red","lightgreen"))+  
  ggtitle("Experiment 6") +
  theme(axis.text = element_text(size = rel(1)),
          axis.title = element_text(face = "bold", size = rel(1)),
          legend.title = element_text(face = "bold", size = rel(1)),
         plot.title = element_text(hjust = .5, size = rel(1)),
         axis.text.x = element_text(face = "bold", size = rel(1.2)))

@


\subsection {RAW RT Model}

<<fig=TRUE>>=

SemanticCuedRecall_final_z$PrimeType = ordered(as.factor(as.character(SemanticCuedRecall_final_z$PrimeCondition)), levels = c("Semantic", "Unrelated"))

SemanticCuedRecall_final_z %>%
  ggplot(aes(x = zPrimeRecogRT_trim, y = zTargetRecogRT_trim, 
             group = PrimeType, color = PrimeType)) +
  geom_smooth(method = "lm", se = FALSE, size = 1)+
    xlab("z-RT to Demask Target") + ylab ("z-RT to Demask Target")+ 
theme_few() +
scale_color_manual(values = c( "red","lightgreen"))+  
  ggtitle("Experiment 6") +
  theme(axis.text = element_text(size = rel(1)),
          axis.title = element_text(face = "bold", size = rel(1)),
          legend.title = element_text(face = "bold", size = rel(1)),
         plot.title = element_text(hjust = .5, size = rel(1)),
         axis.text.x = element_text(face = "bold", size = rel(1.2)))

@

\section {Response Analysis}

\subsection {All Responses}

<<fig=TRUE>>=
SemanticCuedRecall = read.csv("E5_SemanticCuedRecall_FINAL.csv",
                         header = TRUE, sep = ",")

SemanticCuedRecall$Response = ifelse(SemanticCuedRecall$PrimeRespType %in% 
                                 c("Related Word", "Incorrect"), "Incorrect Responses",
                               ifelse(SemanticCuedRecall$PrimeRespType == "No Response",
                                      "No Response", "Correct"))

SemanticCuedRecall$Response = ordered(as.factor(as.character(SemanticCuedRecall$Response)), 
                      levels = c("Correct", "Incorrect Responses", "No Response"))



SemanticCuedRecall_subject = group_by(SemanticCuedRecall, 
                                      Subject, PrimeCondition, Response) %>%
  summarize_at(vars(TargetAccuracy), mean)

ret_figure = Rmisc::summarySE(SemanticCuedRecall_subject, 
                    measurevar = "TargetAccuracy",
                groupvars = c("PrimeCondition", "Response"))

library(ggplot2)
library(ggthemes)
library(dplyr)
ret_figure  %>% 
   ggplot(aes(x = Response, y = TargetAccuracy, 
                          group =PrimeCondition , 
                          fill = PrimeCondition)) +
  geom_bar(stat = "identity", position = "dodge", width = 0.5,
           color ="gray28")+
   geom_errorbar(aes(ymin = TargetAccuracy - se, 
                     ymax = TargetAccuracy + se),
                width=.08, position=position_dodge(.5)) +
  theme_few()+
#  scale_fill_canva()+
 scale_fill_manual(values = c(  "red",
                               "lightgreen"))+       
  xlab("Prime Retrieval") + ylab("Mean Target Accuracy") + 
ggtitle("Experiment 6") +
  theme(axis.text = element_text(size = rel(1)),
          axis.title = element_text(face = "bold", size = rel(1)),
          legend.title = element_text(face = "bold", size = rel(1)),
         plot.title = element_text(hjust = .5, size = rel(1)),
         axis.text.x = element_text(face = "bold", size = rel(1.2)))
@

\subsection {Incorrect Responses}

<<fig=TRUE>>=

ret_figure = Rmisc::summarySE(SemanticCuedRecall, 
                    measurevar = "TargetAccuracy",
                groupvars = c("PrimeCondition", "Response"))

library(ggplot2)
library(ggthemes)
library(dplyr)
ret_figure  %>% 
   ggplot(aes(x = Response, y = TargetAccuracy, 
                          group =PrimeCondition , 
                          fill = PrimeCondition)) +
  geom_bar(stat = "identity", position = "dodge", width = 0.5,
           color ="gray28")+
   geom_errorbar(aes(ymin = TargetAccuracy - se, 
                     ymax = TargetAccuracy + se),
                width=.08, position=position_dodge(.5)) +
  theme_few()+
#  scale_fill_canva()+
 scale_fill_manual(values = c(  "red",
                               "lightgreen"))+       
  xlab("Prime Retrieval") + ylab("Mean Target Accuracy") + 
ggtitle("Experiment 6") +
  theme(axis.text = element_text(size = rel(1)),
          axis.title = element_text(face = "bold", size = rel(1)),
          legend.title = element_text(face = "bold", size = rel(1)),
         plot.title = element_text(hjust = .5, size = rel(1)),
         axis.text.x = element_text(face = "bold", size = rel(1.2)))
@

\subsection{LME}

<<>>=
SemanticCuedRecall$Response = as.factor(SemanticCuedRecall$Response)
contrasts(SemanticCuedRecall$Response) = contr.treatment(3, base = 1)

TOTFeedback_hlm2 = glmer(data = SemanticCuedRecall, 
                               TargetAccuracy ~ PrimeCondition*Response +
                        (1|Subject) + (1|Target.Trial.), family = "binomial")
summary(TOTFeedback_hlm2)

car::Anova(TOTFeedback_hlm2)
@




\end{document}
